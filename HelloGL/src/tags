!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
UTIL_H_INCLUDED	Util.h	2;"	d
Util	Util.h	/^class Util$/;"	c
Util::createShader	Util.cpp	/^GLint Util::createShader(const char* filename, GLenum type)$/;"	f	class:Util	signature:(const char* filename, GLenum type)
Util::createShader	Util.h	/^        GLint static createShader(const char* filename, GLenum type);$/;"	p	class:Util	access:public	signature:(const char* filename, GLenum type)
Util::printLog	Util.cpp	/^void Util::printLog(GLuint object)$/;"	f	class:Util	signature:(GLuint object)
Util::printLog	Util.h	/^        void static printLog(GLuint object);$/;"	p	class:Util	access:public	signature:(GLuint object)
Util::readFile	Util.cpp	/^std::string Util::readFile(std::string filename)$/;"	f	class:Util	signature:(std::string filename)
Util::readFile	Util.h	/^        std::string static readFile(std::string filename);$/;"	p	class:Util	access:public	signature:(std::string filename)
createShader	Util.cpp	/^GLint Util::createShader(const char* filename, GLenum type)$/;"	f	class:Util	signature:(const char* filename, GLenum type)
createShader	Util.h	/^        GLint static createShader(const char* filename, GLenum type);$/;"	p	class:Util	access:public	signature:(const char* filename, GLenum type)
display	main.cpp	/^void display()$/;"	f	signature:()
freeResources	main.cpp	/^void freeResources()$/;"	f	signature:()
initResources	main.cpp	/^bool initResources()$/;"	f	signature:()
main	main.cpp	/^int main(int argc, char* argv[]) $/;"	f	signature:(int argc, char* argv[])
printLog	Util.cpp	/^void Util::printLog(GLuint object)$/;"	f	class:Util	signature:(GLuint object)
printLog	Util.h	/^        void static printLog(GLuint object);$/;"	p	class:Util	access:public	signature:(GLuint object)
readFile	Util.cpp	/^std::string Util::readFile(std::string filename)$/;"	f	class:Util	signature:(std::string filename)
readFile	Util.h	/^        std::string static readFile(std::string filename);$/;"	p	class:Util	access:public	signature:(std::string filename)
